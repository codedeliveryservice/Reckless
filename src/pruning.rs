const FEATURES: usize = 10;

const MEAN: [f32; FEATURES] = [2.20715785, -78.72618866, 159.03494263, -34.08322525, 0.08341707, 0.13248523, 0.05814743, 0.18361558, -86.42444611, -0.27733982];
const STD: [f32; FEATURES] = [1.08293223, 318.65686035, 186.64457703, 228.03169250, 0.27651158, 0.33901754, 0.23402204, 0.38717037, 1321.89526367, 2.28424382];

const W1: [[f32; FEATURES]; 32] = 
    [[0.03258342, 0.00607943, 0.18144962, 0.31124997, -0.44090718, 0.02741450, 0.08838250, -0.01641677, -0.87555814, 0.01409650],
    [0.36290666, 0.03122689, -0.35501808, -0.22879952, -0.39794490, -0.01011101, -0.00374320, 0.32450408, -1.49218893, 0.16952838],
    [-0.43988118, 0.17581408, 0.17899147, 0.06247932, 0.12166264, 0.50671810, 0.03329591, -0.21098249, -0.69257480, 0.85710013],
    [0.55815494, 0.00340354, -0.03816418, 0.00217207, 0.34119925, 0.42149708, 0.03049289, 0.08814248, 0.29356876, 1.26477218],
    [-0.18246455, -0.04078929, -0.60854644, -0.16914536, 0.43639249, -0.60754663, -0.03780519, 0.32943583, -0.21747415, -0.38879853],
    [-0.07828223, 0.12814316, -0.08914096, -0.48589438, 0.15143155, -0.09970142, 0.19818522, -0.61662823, 1.84214783, 0.01855021],
    [-0.07066495, -0.01681158, 0.05646931, 0.04855741, 0.04466186, 0.01687939, -0.01503980, -0.04142992, -1.05189514, 1.30219364],
    [0.15215805, 0.24108571, -0.02191880, 0.24930300, 0.07677104, -0.00577640, -0.00067706, -0.10257431, -1.24573565, 0.10726838],
    [-0.01384731, -0.53422678, 0.42033431, 0.03690942, -0.65557194, 0.32144800, -0.65890795, -0.10787611, -0.12408510, -0.07713979],
    [0.00178702, -0.00056777, -0.00084538, -0.04552455, 0.01573253, -0.89494020, -0.02800544, 0.08903649, -1.70482659, 0.34481391],
    [0.01913932, -0.01660038, 0.04337163, 0.34275126, 0.35048133, 0.39488879, 0.17817624, -0.19599910, -1.11077237, -1.08015978],
    [-0.14614706, -0.01579280, -0.04800238, 0.42874995, 0.60329783, 0.35640940, 0.08631161, -0.41188261, 0.31072119, 1.25085413],
    [-0.04916521, -0.81687468, 0.01251900, 0.07695051, 0.35299686, 0.28438079, -0.32518685, -0.18111993, -0.19472112, -0.46265379],
    [0.19038911, 0.22623016, -0.52771515, 0.26023203, 0.41536483, 0.52919334, -0.09508108, -0.39980218, 1.19665825, -0.51244372],
    [-0.25212273, 0.14964302, -0.48086223, 0.35175863, 0.04119480, 0.19745292, 0.12169921, -0.27337962, -0.45483112, -0.25819394],
    [0.41323516, -0.18651696, 0.27326694, 0.21091129, 0.27830034, 0.07581247, -0.16211015, 0.46784854, -0.45448980, -0.02686146],
    [0.06489113, -0.04613307, 0.08081361, 0.43408167, 0.01542274, 0.04775123, -0.26463813, 0.20276144, -1.65484107, 0.02635320],
    [0.17365178, -0.00749475, -0.02121905, 0.01453662, 0.41026363, -0.27548948, -0.04420140, 0.27577108, -0.26333585, -1.17492759],
    [0.08442003, -0.01931280, 0.45252749, -0.01521317, 0.24867676, -0.34812558, 0.01991163, 0.12091653, 1.56130397, -1.13331854],
    [0.04813930, -0.51031172, -0.84020227, -0.98337752, 0.04149114, 0.09739558, -0.46018571, -0.00477245, 0.59963757, 0.16686659],
    [-0.07804256, 0.12098308, -0.69134134, 0.91768521, 0.25263995, 0.24047552, -0.58694416, 0.04254058, -0.02384634, -0.01410128],
    [-0.11869111, 0.00420319, 0.08986068, 0.08697576, 0.04562614, 0.03670607, -0.03852623, -0.04712693, -0.91603124, 1.13234365],
    [0.07181934, -0.06762394, -0.59166521, 0.00042021, 0.27024367, -0.24982163, -0.20206997, -0.23435208, -1.48816240, 0.12598296],
    [-0.19215336, 0.31526101, -0.43501326, -0.09768463, -0.00018134, 0.25821841, -0.09233525, 0.11689520, -0.89721036, -0.08491985],
    [0.18446264, 0.45050547, 0.21709003, 0.27480528, 0.03884565, 0.06796939, -0.11036737, -0.06412043, -1.15338469, -0.01386658],
    [-0.05389280, -0.03195191, 0.40678921, -0.92117578, -0.66803133, -0.72542310, 0.21179806, 0.37942019, 1.98218441, 0.65135884],
    [0.29012355, -0.39456707, -0.24092346, -0.20120519, 0.10384700, 0.23286366, 0.00370823, 0.34778017, 0.21899810, 0.84305185],
    [0.01781385, 0.00118352, -0.00182123, 0.33302265, 0.02139230, 0.02535569, 0.00009499, -0.46498239, -1.91520679, 0.02745165],
    [-0.00526480, -0.00034277, 0.01286275, 0.00015683, -0.91562498, 0.00250641, -0.08750022, 0.12935896, -0.90509379, 1.01990151],
    [-0.03079399, -0.09405702, 0.01643773, 0.72898912, -0.01851016, -0.04128584, -0.78396392, 0.05045570, -1.42194104, 0.03545491],
    [-0.60596061, 0.02522188, -0.17119037, -0.02125603, -0.87903184, 0.22809111, -0.30400935, -0.21068697, 0.31607312, 1.25999534],
    [0.01037969, 0.00051683, -0.00079817, 0.31076556, 0.34926996, 0.21884364, 0.10759141, -0.35807565, -1.78895974, 0.01225642]];

const B1: [f32; 32] = 
    [0.15455030, -0.43944499, -0.05487563, -0.49907219, 0.40446430, 0.44445387, -0.03515429, 0.29918423, 0.49610427, -0.24621168, -0.23018418, -0.77797478,
    0.11447707, 0.13307533, -0.05542589, -0.26621863, 0.28590548, -0.53988189, 0.30715689, 0.28582287, -0.38857156, -0.00105113, -0.61368471, -0.39372468,
    0.44198462, -0.09443245, -0.27482483, -0.09032487, -0.29150656, 0.28331119, 0.34497514, 0.13822150];

const W2: [[f32; 32]; 1] =
    [[0.41213280, -0.64582634, -0.54612452, 0.53973925, 0.39392409, -0.64329970, -0.60620546, 0.62968898, -0.35776275, -1.09087467, 0.58479702, 0.84577268,
    0.21465328, -0.44844875, 0.40286586, -0.32473043, 0.70955235, 0.69044369, -0.89770490, -0.39352393, 0.72785419, -0.85318649, -0.81090879, -0.51500380,
    0.37093186, 0.79477429, 0.57336819, 1.17339313, -1.14456069, 0.74337250, 0.57838184, 0.65996557]];

const B2: [f32; 1] = [-0.07407841];

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

fn sigmoid(x: f32) -> f32 {
    1.0 / (1.0 + (-x).exp())
}

fn linear<const IN: usize, const OUT: usize>(
    input: &[f32; IN], weights: &[[f32; IN]; OUT], bias: &[f32; OUT],
) -> [f32; OUT] {
    let mut out = [0.0; OUT];
    for i in 0..OUT {
        out[i] = bias[i];
        for j in 0..IN {
            out[i] += weights[i][j] * input[j];
        }
    }
    out
}

pub fn predict(features: [i32; FEATURES]) -> f32 {
    let mut input = [0.0; FEATURES];
    for i in 0..FEATURES {
        input[i] = (features[i] as f32 - MEAN[i]) / STD[i];
    }

    let hidden = linear::<FEATURES, 32>(&input, &W1, &B1);
    let mut activated = [0.0; 32];
    for i in 0..32 {
        activated[i] = relu(hidden[i]);
    }

    let output = linear::<32, 1>(&activated, &W2, &B2);
    sigmoid(output[0])
}

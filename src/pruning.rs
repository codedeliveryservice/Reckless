const MEAN: [f32; 6] = [2.07862830, 0.37471408, 99.73131561, 38.72679138, 0.65279406, 3.27056575];
const STD: [f32; 6] = [1.00626719, 0.48404899, 626.27398682, 270.96136475, 0.47608203, 5.60374832];

const W1: [[f32; 6]; 32] = [
    [0.01896901, 0.05112473, 0.25090677, -1.39163542, 0.08483283, 0.86923116],
    [1.05258453, -0.20723073, 0.69860244, 0.06455902, 0.03196846, 0.04568833],
    [-0.46444690, 0.10693809, 0.05559463, -1.09624732, -0.17094287, 0.11687055],
    [0.78405470, -0.06826342, 0.13345946, 0.85736752, 1.05182767, -0.30748737],
    [-0.10693005, -0.52498370, 0.41616637, 0.32695112, 0.76067811, 0.55762827],
    [0.15861425, 0.69069421, 0.28685221, 0.02277706, 0.71593481, 0.46284467],
    [0.67342424, -0.01984711, 0.48097560, 0.27879018, 0.70790672, -0.08488781],
    [0.07099954, -0.01660981, -0.43013918, 1.11927104, 0.49492809, 0.21191537],
    [0.12761070, 0.60722798, -0.05444700, 0.45089391, 0.13440856, 0.77327722],
    [0.77001721, -0.54390919, 0.42704043, -0.06558898, 0.07845404, -0.10182112],
    [0.56309277, -0.10556483, 0.39397019, -0.68410915, -0.23547070, 0.36650223],
    [0.02267544, 0.00450424, -0.03718881, 1.42069340, 0.04240331, 0.23273432],
    [-0.22909559, 0.02773803, -2.03450656, 0.69252121, -0.04766208, -0.28240129],
    [-0.25038850, 0.53638160, -0.27979818, 0.48460463, 0.25016201, -0.40136227],
    [-0.21921906, -1.10776913, 0.10033625, 0.48136652, 0.24422066, -0.27885330],
    [0.04264502, 0.01893678, 0.02017819, -1.46877182, -0.16069816, 0.19607860],
    [-0.28577608, 0.20993051, 0.83367801, -0.52613759, -0.61763424, 0.00430482],
    [1.09949231, -0.26436624, -0.24931665, -0.12322640, 0.33075598, -0.29513198],
    [-1.07993734, -0.19002327, -0.18738909, -0.41983423, -0.06299894, 0.24120708],
    [-1.92581677, 0.03032825, -0.02121583, -0.04468245, -0.31487638, 0.20022956],
    [-0.04824217, 0.00573924, 0.01672817, -0.03367708, 0.01813134, 1.33689320],
    [0.26875004, -0.61660248, 0.48768944, 0.37542659, 0.61716312, 0.14815365],
    [0.25540644, 0.05846580, 1.41520298, 0.27187869, -0.06195028, -0.13068853],
    [0.16835746, -0.01834243, -0.01870511, 0.69805390, 0.33279103, 1.30651367],
    [-0.77868354, 0.02928517, -0.01770359, -0.12260094, -0.69587046, 1.03595865],
    [-0.24952815, 0.04671611, -0.28424203, 0.94223034, -0.07410769, -0.20558701],
    [1.36829042, -0.04745613, 0.84808254, 0.12611295, -0.01653852, -0.01238660],
    [-0.06315708, 0.11776465, -0.97458100, -0.44025004, -0.49342445, -0.61081129],
    [0.02257478, -0.83498758, 0.24621606, -0.70030862, 0.23260169, -0.51723564],
    [0.38224044, -0.03027628, 0.50145322, -0.83419245, -0.38398638, 0.81928885],
    [0.02935377, 0.00449743, -1.29814780, 1.16595244, 0.09281004, -0.14471406],
    [0.33898669, 0.00601646, 0.04844794, 1.18925250, -0.54402912, 1.14492285],
];
const B1: [f32; 32] = [
    0.75190049,
    0.42915413,
    -0.75495869,
    -0.16986099,
    -0.01253554,
    0.22759302,
    -0.24307232,
    0.07767010,
    0.32549125,
    0.35533580,
    0.46476871,
    0.53994048,
    -0.81571549,
    0.54657316,
    -0.09341668,
    0.27791271,
    0.03654860,
    0.93447977,
    -0.62015599,
    -0.21293497,
    0.81952596,
    0.40094832,
    -1.45561898,
    0.98473483,
    -0.19668701,
    0.47464982,
    0.28199363,
    -0.61165011,
    0.19157726,
    -0.00942812,
    0.27384451,
    0.28773481,
];
const W2: [[f32; 32]; 1] = [[
    -0.73404467,
    0.41148657,
    0.99386108,
    -0.92412037,
    0.18807513,
    0.53077090,
    0.65502340,
    0.52039766,
    -0.41701731,
    -0.36972940,
    0.30072048,
    0.73295486,
    -1.36450005,
    0.40089288,
    0.35973465,
    -0.97260380,
    0.48958987,
    -0.51695412,
    -0.36762035,
    -0.63857019,
    -0.75089163,
    0.29082018,
    1.66219091,
    0.94488621,
    0.93508178,
    0.40708151,
    0.50434816,
    0.92164433,
    0.43436617,
    0.64865643,
    0.53036898,
    -0.78709263,
]];

const B2: [f32; 1] = [0.09452104];

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

fn sigmoid(x: f32) -> f32 {
    1.0 / (1.0 + (-x).exp())
}

fn linear<const OUT: usize, const IN: usize>(
    input: &[f32; IN], weights: &[[f32; IN]; OUT], bias: &[f32; OUT],
) -> [f32; OUT] {
    let mut out = [0.0; OUT];
    for i in 0..OUT {
        out[i] = bias[i];
        for j in 0..IN {
            out[i] += weights[i][j] * input[j];
        }
    }
    out
}

pub fn predict(mut input: [f32; 6]) -> f32 {
    for i in 0..6 {
        input[i] = (input[i] - MEAN[i]) / STD[i];
    }

    let hidden = linear::<32, 6>(&input, &W1, &B1);
    let mut activated = [0.0; 32];
    for i in 0..32 {
        activated[i] = relu(hidden[i]);
    }

    let output = linear::<1, 32>(&activated, &W2, &B2);
    sigmoid(output[0])
}

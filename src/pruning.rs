const FEATURES: usize = 11;

const MEAN: [f32; FEATURES] = [2.27414703, -121.66275787, 166.89688110, -104.90303802, 0.06469839, 0.11538190, 0.02915488, 0.16972767, 0.50139588, -91.44734955, -0.37951344];
const STD: [f32; FEATURES] = [1.07909620, 369.37710571, 193.96749878, 310.32522583, 0.24599288, 0.31948224, 0.16824052, 0.37539336, 0.49999803, 1222.70837402, 2.49176979];

const W1: [[f32; FEATURES]; 32] = 
    [[0.00378311, 0.00016581, 0.00072451, 0.53205562, 0.00118639, 0.00530526, 0.07463346, 0.21636778, -0.25664005, -2.09628034, 0.00262425],
    [0.00109511, 0.00733753, 0.11520373, 1.51126635, 0.00978495, -0.03816855, -0.65465581, 0.05006232, -0.15111259, -0.81097728, -0.11099716],
    [0.45457560, 0.02584159, -0.07009777, 0.44973946, -0.09153933, -0.14646463, 0.14445311, -0.01155540, -0.03880024, 2.04575920, -0.00833399],
    [0.37188157, 0.03858622, -0.28324184, -0.21956071, 0.39942157, -0.18129560, -0.32113355, 0.32902342, 0.12523484, -0.96066052, 0.47652981],
    [-0.24371415, 0.14280851, -0.17841834, -0.29734725, 0.28021637, -0.11660212, -0.49089777, -0.31018996, 0.23303467, 0.09621235, 1.44910443],
    [0.02073065, -0.00151333, 0.04467420, 0.55483121, 0.00026831, 0.25816649, -0.00151739, 0.21639413, -0.00578356, -2.08740950, 0.04488014],
    [0.00515855, -0.18338190, -0.01135460, -0.82807183, 0.10890777, -0.02201052, 0.10163037, 0.03569174, 0.03768451, 2.68557954, 0.01876341],
    [-0.05643171, 0.14030501, 0.04028802, -0.55749023, -0.48819885, 0.17350945, 0.02326146, 0.21192493, 0.06202198, -1.37103617, -0.07075459],
    [-0.00130026, 0.02460042, 0.40589824, -0.00773269, 0.34633416, 0.13153525, -0.41782254, 0.21364763, -0.16393524, 1.86009789, -0.08020625],
    [0.08356741, -0.37693733, 0.22137587, 0.34888372, -0.23496681, -0.00865526, -0.25666294, 0.26677656, -0.24063151, -1.52617645, -0.11308745],
    [0.04506025, 0.14185072, -0.16135114, -0.18286116, 0.36179879, 0.06391821, -0.36583781, 0.15396318, -0.33647892, 1.71257401, -0.21738635],
    [0.00478045, -0.03351258, -0.27682427, 1.02042270, 0.24747588, 0.22202644, 0.08533300, 0.02515857, -0.02478242, 0.21110636, 0.22407433],
    [-0.00416573, -0.03907890, 0.10492790, 0.02417989, 0.15396526, 0.12850824, -0.45060742, 0.25886756, -0.35711506, 1.29868662, 0.31039137],
    [0.09247664, -0.76750994, 0.18869655, -0.57454747, -0.03871457, -0.05799313, 0.08769288, -0.44397581, -0.02947845, 0.31420073, 0.63626134],
    [-0.00465687, 0.03339767, -0.01782247, -0.18155478, -0.54171783, 0.04459696, -0.00094993, 0.00254127, 0.03270982, -1.40481305, 1.43686450],
    [-0.01316025, -0.00118897, 0.00522942, -0.91320413, -0.01343468, -0.03352678, -0.14147563, 0.62782615, 0.00418461, 3.58416772, -0.02352462],
    [0.26987773, -0.13935287, 0.50972474, 0.98486507, 0.27611378, 0.32803231, -0.09530661, 0.01389643, -0.10098615, 0.43084595, 0.72045058],
    [-0.00708322, -0.01143031, -0.01116209, -1.16017461, 0.07256071, 0.02301787, -0.38437605, -0.58542293, 0.04731519, 1.82074785, 0.02058910],
    [-0.29925287, 0.13935785, 0.14845182, 0.19917707, 0.15079549, 0.46660829, 0.00509827, 0.37362939, -0.04042485, -0.60604596, 0.90846062],
    [0.14124675, 0.26709729, -0.04005140, -0.10155018, 0.27765447, 0.25510094, 0.08824053, -0.13320507, -0.08921952, -1.34020555, 0.05232998],
    [-0.01068763, -0.00428405, 0.00459675, -0.70621938, -0.00752312, -0.02152300, -0.35595354, -0.00429232, 0.00759405, 2.75017023, -0.01935113],
    [0.19787613, -0.01834449, -0.10175072, -0.03458689, 0.02425135, 0.04954466, -0.66978800, 0.12047315, 0.80071795, -0.05976973, -1.28466046],
    [0.05841389, -0.02623393, 0.51479101, 1.36880183, -0.09113473, -0.13194969, -0.05555010, -0.01720083, -0.00842045, -0.86708510, -0.01846054],
    [0.01111155, -0.15852150, -0.13516030, -0.18550879, -0.48015672, -0.39934611, -0.23038502, 0.03430451, 0.07995875, -1.53222930, 0.17128637],
    [0.14110915, -0.09919683, 0.04782975, 0.49906185, 0.47462159, -0.91249239, -0.12653187, -0.03990231, -0.10445648, -0.87781090, -0.96334326],
    [0.00169428, -0.00227324, 0.00305144, 0.01929350, -0.07127645, -0.00477477, -0.55917317, 0.22032242, -0.00704836, 1.41636288, -1.36163390],
    [-0.12324996, 0.12488385, 0.64235085, -0.04742121, -0.67167604, -0.01819715, 0.44726437, -0.34128699, 0.04719317, 0.03765348, 0.17474629],
    [0.55257279, 0.01059488, 0.16272084, 0.00075143, -0.06830759, -0.26280490, 0.32045662, -0.21221225, 0.48199868, 0.01027869, 0.58634418],
    [-0.22971217, 0.00022123, -0.00155928, -0.57643604, -0.00648747, 0.18123436, -0.01860712, -0.11869681, 0.03908795, 1.58254433, -0.60152942],
    [-0.01181307, -0.01422486, -0.00218857, -0.82140267, 0.00718386, -0.00999348, -0.27159405, 0.00534179, 0.03131481, 2.59592223, -0.00152948],
    [-0.09779967, -0.03393588, -0.39632371, 0.45281151, 0.29734507, -0.51867318, -0.08784087, -0.12134529, 0.01414639, -0.14781719, -0.42238110],
    [0.00056771, 0.03537450, 0.35762641, 0.93011558, -0.00934171, 0.31084350, -0.63594335, -0.00225442, -0.01575752, -0.93897122, -0.05820613]];

const B1: [f32; 32] = 
    [0.35242823, 0.09442472, 0.46391064, -0.14182688, 0.23302132, 0.25713199, 0.44770372, 0.02957522, 0.49544397, -0.32080761, 0.28385216, -0.58479744, 0.37559152,        
    -0.01272084, -0.26801813, 0.25131530, -0.50831276, 0.09645820, 0.24627249, 0.41019902, -0.07015734, 0.42978999, -0.23391861, -0.22312950, -0.55732393,
    0.08875819, -0.85737568, -0.43483207, -0.73791152, 0.25352886, -0.72766155, 0.35913464];

const W2: [[f32; 32]; 1] =
    [[1.21606934, 0.85875094, -1.01002920, -0.46684670, 0.90677136, 1.00527942, -1.36266613, -0.83998370, -0.78755677, -1.17081213, -0.67788923, 0.85781068,
    -0.63693130, 0.54697901, -1.11719310, 1.94076884, 0.67376387, -1.40643036, -0.85887837, 0.84183937, 2.16587377, 0.68131691, -1.14477634, -0.73569971,
    1.14953101, -1.14676201, 0.49013981, 0.55866480, 1.17645204, -1.02962947, 0.67402923, 0.61735660]];

const B2: [f32; 1] = [0.09081668];

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

fn sigmoid(x: f32) -> f32 {
    1.0 / (1.0 + (-x).exp())
}

fn linear<const IN: usize, const OUT: usize>(
    input: &[f32; IN], weights: &[[f32; IN]; OUT], bias: &[f32; OUT],
) -> [f32; OUT] {
    let mut out = [0.0; OUT];
    for i in 0..OUT {
        out[i] = bias[i];
        for j in 0..IN {
            out[i] += weights[i][j] * input[j];
        }
    }
    out
}

pub fn predict(features: [i32; FEATURES]) -> f32 {
    let mut input = [0.0; FEATURES];
    for i in 0..FEATURES {
        input[i] = (features[i] as f32 - MEAN[i]) / STD[i];
    }

    let hidden = linear::<FEATURES, 32>(&input, &W1, &B1);
    let mut activated = [0.0; 32];
    for i in 0..32 {
        activated[i] = relu(hidden[i]);
    }

    let output = linear::<32, 1>(&activated, &W2, &B2);
    sigmoid(output[0])
}

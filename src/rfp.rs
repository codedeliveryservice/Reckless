const MEAN: [f32; 7] = [2.3679957, 135.21445, -8.594725, 284.50192, 0.7854567, 0.51265526, -1.0781924];
const STD: [f32; 7] = [1.6476372, 467.49973, 133.04922, 350.42822, 0.41050512, 0.49983987, 1.9741472];
const W1: [[f32; 7]; 8] = [
    [-0.01100286, -0.4726611, 0.8005074, 0.6355691, 0.0037153, 1.7107345, 0.46089125],
    [-0.3904934, -0.00360119, -0.00331036, -0.02526864, 0.16923657, -0.30110693, 0.48921192],
    [0.40424526, 0.72394687, 0.1415396, -0.5053363, 0.7077062, -1.0053504, 0.09768052],
    [-0.20758204, 0.08337646, 0.17900755, 0.39902124, -0.30748856, -0.8813873, 0.46901903],
    [0.30467987, -0.06050765, -0.6548789, 0.7405537, 0.17422426, 1.2968141, -0.02166466],
    [0.24756332, -0.04114055, 0.19258386, -1.7525858, -0.07338312, 0.17763194, 0.2582868],
    [0.12336004, 0.47554776, -0.2635093, -1.2418867, -0.32891074, -0.14410652, 0.4618279],
    [-0.3533114, -0.20624456, -0.7234397, -0.05050695, 0.05861507, -0.16581741, -0.8457265],
];
const B1: [f32; 8] = [0.6858959, -0.34580803, 1.1794885, 0.28872743, 0.7605195, -0.778992, -0.630367, 0.2918095];
const W2: [[f32; 8]; 1] =
    [[0.73929834, -0.47520506, 0.631633, 0.64112794, 0.6013936, -1.1377326, -0.6789719, -0.7152117]];
const B2: [f32; 1] = [0.23684448];

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

fn sigmoid(x: f32) -> f32 {
    1.0 / (1.0 + (-x).exp())
}

fn linear<const OUT: usize, const IN: usize>(
    input: &[f32; IN], weights: &[[f32; IN]; OUT], bias: &[f32; OUT],
) -> [f32; OUT] {
    let mut out = [0.0; OUT];
    for i in 0..OUT {
        out[i] = bias[i];
        for j in 0..IN {
            out[i] += weights[i][j] * input[j];
        }
    }
    out
}

pub fn predict(mut input: [f32; 7]) -> f32 {
    for i in 0..7 {
        input[i] = (input[i] - MEAN[i]) / STD[i];
    }

    let hidden = linear::<8, 7>(&input, &W1, &B1);
    let mut activated = [0.0; 8];
    for i in 0..8 {
        activated[i] = relu(hidden[i]);
    }

    let output = linear::<1, 8>(&activated, &W2, &B2);
    sigmoid(output[0])
}

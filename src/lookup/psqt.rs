use crate::attacks::Color;

const FILES: usize = 8 / 2;
const RANKS: usize = 8;

/// Symmetrically distributed piece-square bonuses (mirrored along the Y axis).
#[rustfmt::skip]
const BONUSES: [[[(i32, i32); FILES]; RANKS]; 6] = [
    [   // Pawn
        [(0, 0); FILES]; RANKS
    ],
    [   // Knight
        [(-98,  31), ( 23,  64), ( -3,  60), ( 95,  28)],
        [( 10,  40), (-18,  57), ( 36,  33), ( 64,  30)],
        [( 14,  43), ( 32,  43), ( 60,  29), ( 51,  29)],
        [( 38,  53), (  7,  36), ( 21,  41), (  7,  36)],
        [(  6,  35), ( 10,  31), ( -1,  29), ( -6,  32)],
        [(-26,  -7), (-10,  -6), (-17, -28), (  2,  14)],
        [(-12,   5), (-28,  29), (-23,  -7), ( -8,  -5)],
        [( 15, -18), (-14, -13), (-16,  -3), (-18,  22)],
    ],
    [   // Bishop
        [(-21,  48), ( 10,  40), (-62,  43), ( 11,  36)],
        [(-31,  40), (-10,  27), ( 16,  10), ( 12,   9)],
        [( 22,  24), ( 15,  23), ( 61,   2), ( 44,   3)],
        [( -3,  26), ( -5,  17), ( 21,   8), ( 28,  11)],
        [( 11,   3), ( -5,   3), ( -8,   9), ( 10,  12)],
        [(  3,  19), (  8,  -1), (  0,   0), ( -3,   5)],
        [( 16,   3), ( 11, -10), (  9,  -6), ( -7,  -2)],
        [(  6,  36), ( 10, -16), ( -7,  -1), (-17,  14)],
    ],
    [   // Rook
        [( 68,  22), ( 76,  23), ( 70,  22), ( 74,  25)],
        [( 32,  40), ( 20,  52), ( 50,  45), ( 65,  44)],
        [( 25,  38), ( 54,  37), ( 63,  32), ( 58,  28)],
        [(-11,  45), (-13,  54), ( 12,  39), (  2,  40)],
        [(-49,  26), (-38,  32), (-36,  33), (-26,  23)],
        [(-43,  -6), (-35,  -6), (-29,  -3), (-25,  -4)],
        [(-56,  -2), (-33, -10), (-15, -13), (-13, -11)],
        [(-21, -12), (-14,  -9), ( -6,  -9), (  3, -16)],
    ],
    [   // Queen
        [( 39,  67), ( 55,  91), ( 52,  92), ( 60,  84)],
        [( 21,  99), (-23, 120), ( -4, 131), (-11, 157)],
        [(  7,  83), ( 25,  93), (  3, 117), ( 12, 119)],
        [(  6,  98), (-10, 114), ( -5, 104), ( -4,  98)],
        [(  4,  45), ( -1,  61), (  0,  51), (  0,  57)],
        [(  5,  30), (  9,   5), (  8,  27), (  5,   3)],
        [(  3,   3), (  7,  -9), ( 23, -35), ( 21, -17)],
        [(  4,  22), ( 15, -33), ( 17, -44), ( 16, -21)],
    ],
    [   // King
        [( 98, -63), ( 70,  12), ( 67,  53), ( 61,  65)],
        [( 30,  18), ( 67,  42), ( 65,  47), ( 61,  61)],
        [( 16,  33), ( 32,  54), ( 21,  52), ( 40,  52)],
        [(-23,  25), (  2,  41), ( 15,  39), ( 37,  32)],
        [(-51,   8), (-37,  21), (-11,  19), (  8,  19)],
        [(-48, -11), (-18,  -8), (-34,   4), (-26,  10)],
        [( -9, -30), ( -4, -23), (-27,  -4), (-36,   2)],
        [( -3, -52), (  5, -34), (-16, -21), (-14, -30)],
    ],
];

/// Asymmetrically distributed pawn bonuses.
#[rustfmt::skip]
const PAWN_BONUSES: [(i32, i32); 64] = [
    (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0),
    (186, 152), (145, 145), (166, 126), (195,  59), (131,  35), ( 33,  50), (-47,  83), (-38, 139),
    ( -7, 115), ( 17, 116), ( 56,  87), ( 53,  47), ( 49,  37), ( 77,  31), ( 44,  99), ( -9,  68),
    (-32,  34), (-12,  19), (-21,   2), (  4, -19), (  9, -34), ( 10, -22), ( -2,  -8), (-26,  -3),
    (-40,  -8), (-16, -16), (-17, -42), (-14, -47), (-10, -47), ( -7, -39), (  1, -34), (-32, -43),
    (-37, -25), (-24, -26), (-31, -50), (-27, -32), (-17, -38), (-15, -41), ( 23, -42), (-16, -52),
    (-46, -11), (-29, -18), (-44, -33), (-36, -37), (-26, -26), ( -3, -38), ( 25, -47), (-34, -52),
    (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0),
];

/// Generates a piece-square table indexed by [color][piece][square].
pub fn generate_map() -> [[[(i32, i32); 64]; 6]; 2] {
    let mut map = [[[(0, 0); 64]; 6]; 2];

    for (square, &pawn_bonus) in PAWN_BONUSES.iter().enumerate() {
        map[Color::Black as usize][0][square] = (-pawn_bonus.0, -pawn_bonus.1);
        map[Color::White as usize][0][square ^ 56] = pawn_bonus;

        for (piece, &bonus) in BONUSES.iter().enumerate().skip(1) {
            let (rank, file) = (square / 8, square % 8);
            let file = if file > 3 { 7 - file } else { file };

            let bonus = bonus[rank][file];
            map[Color::Black as usize][piece][square] = (-bonus.0, -bonus.1);
            map[Color::White as usize][piece][square ^ 56] = bonus;
        }
    }

    map
}

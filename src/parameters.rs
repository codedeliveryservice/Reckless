pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

#[cfg(feature = "spsa")]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        pub fn set_parameter(name: &str, value: &str) {
            match name {
                $(stringify!($name) => unsafe { parameters::$name = value.parse().unwrap() },)*
                _ => panic!("Unknown tunable parameter: {name}"),
            }
        }

        pub fn print_options() {
            $(println!("option name {} type string", stringify!($name));)*
        }

        $(pub fn $name() -> $type {
            unsafe { parameters::$name }
        })*

        #[allow(non_upper_case_globals)]
        mod parameters {
            $(pub static mut $name: $type = $value;)*
        }
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [0.015096168626259012, 0.15717904494297683, 0.2974240428009066, 0.1617372440742311, 0.39691041802163973, -0.011108963926481615, 0.022076217311285777, -0.14275420060140245, 0.20428832486188866, 0.11204129840621387, 0.17043006825697773, 0.06858385006858175, 0.16754605915804274, -0.014297666408012758, -0.017894575194252367, -0.04621766535901329, 0.00446067968605593, 1.2561126295767857, -0.3874019434756738, -0.462602448888804, -0.46620191403365696, 0.0029847330697592095, 0.0022441392702349304, 0.018423144488949723, 0.01490120785985362, 0.020106667372716734, 0.05606463209255994, 0.33932176058957053, 0.16866285691110908, 0.015671505456047355, 0.39955425659283494, 0.082363076492525, 0.21774533057278425, 0.029883674068924896, 0.16280412523917684, 0.15974141781568738, 0.3392344231396337, 0.3104544814712462, 0.3581633247737048, 0.0924421250134792, 0.2742072601306309, 0.29326393155557906, -0.015821972169182307, 0.749590733174855, 0.27155949367352195, 0.2769662975372721, -0.1342784499552944, 0.36585777069168735, 0.2775720843600995, 0.14089587966852887, 0.2820841632133555, 0.32730484967373663, -0.21716810607546197, 0.09603268420020006, 0.21499054105889528, 0.15201453886474905, -0.7450766051376065, 0.2989238574221731, 0.3138591833331963, 0.47973482957375757, 0.02977094232267172, 0.12490415428263109, -0.08196636154327479, 0.0816636899659765, 0.011094346930520657, -0.011424981067866215, 0.11473625677947659, 0.0720397448799053, -0.15378306281386697, 0.17563412644863488, 0.005912787693948753, 0.020931792521950376, -0.1329403471702089, 0.007245700043772956, 0.015542633280425698, 0.004916845501524024, 0.022453843151510035, -0.03889765128324862, -0.08101431258959545, 0.33823510305188953, -0.0606599328321105, 0.48513630213514436, -0.553095600095048, 0.10742509985632745, 0.29012361704285583, 0.43224333427227823, -0.09445835303409017, 0.1629709702514788, -0.10091139697523974, -0.12223452520374102, 0.0038977316622596865, -0.010160500787721667, -0.031220897883176797, -0.059911027725589046, 0.0118974953971541, -0.020642840538023604, -0.011639309520396523, -0.011018948468473363, 0.03595895302772984, 0.015654852304659947, -0.015303814949566915, -0.0380166858011804, 0.00900521569784774, -0.004285118801713153];
const FC1_BIAS: [f32; 8] = [-0.5066116208076075, 0.006868650343302341, -0.6639651513953979, -0.6414131238290366, 0.6058470552019031, -0.05923028516765204, 0.7049267175947456, 0.03591737428593391];
const FC2_WEIGHT: [f32; 8] = [-0.24570696821010338, 0.9221168135687516, -0.563256477005819, -0.7797435125546777, 0.4421055235782122, -0.044788555736992884, 0.5680443100594195, 0.03501954974355529];
const FC2_BIAS: f32 = 0.4370849152396372;

const Y_MEAN: f32 = -2236.6047685185713;
const Y_STD: f32 = 1835.0205388686572;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 603.6480067521389) / 4037.838992438483;
    input[1] /= 93.92266201315981;
    input[2] /= 9.214261259595284;
    input[3] /= 3.7674285274012647;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

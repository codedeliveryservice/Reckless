pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [
    0.0634138528842725, -0.1334833829716983, -0.18246014914169056, -0.1252682243788955, 0.11321609491029741, -0.007837785076240325, 0.20324921582993086, -0.29836512989960545, 0.014215379615656299, -0.011836500954910548, -0.028819666098267162, 0.0009651728375908771, -0.1463919369149982, -0.3476158982463044, 0.033818454350106185, -0.16180113578120298, 0.34545770910125967, -0.002581850998558301, -0.12347173183033872, 0.1907638586015895, 0.10173943089189463, 0.2644670377258124, -0.1990973957386155, 0.04393350707068431, 0.41248185532495923, 0.12591535226542078, 0.08846979286062726, 0.09964596343831089, 0.08614107026943066, 0.5037218313715743, -0.20172969882925407, -0.13142801606458943, -0.2095027967149093, 0.05976612250469144, 0.15445686484192822, 0.026534762432614153, 0.13097447751405453, -0.14980309682259366, 0.1916538852286577, 0.0064165750965887855, 0.04180540029085742, -0.23786939086881076, 0.46177507726673866, -0.08405615791803292, 0.005795845889063764, -0.12130541204973547, -0.41782023284260394, 0.18377001939675452, -0.029813721123120692, -0.11008780494757271, -0.03278887167757539, -0.266162294344711, 0.010907662931036606, 0.07244580015525798, 0.22692822287134679, 0.25376073250489584, 0.44524443999173885, 0.2681705508446049, -0.0224285121927959, 0.04754235742959866, 0.24939733680235032, 0.3666415533303254, 0.21353329416026745, 0.1269925697305598, 0.37651215156728873, -0.30085546712165606, 0.22774020461619682, 0.4617896292249491, -0.5235084562382664, 0.25163568336389874, 0.21649917399879842, 0.16258871713663636, 0.610317801579455, -0.35133020024744227, -0.017708183598052537, -0.2411123912313158, -0.01965217768926474, -0.02285020141247997, 0.03957583648747478, -0.18775549731252095, -0.0320122464143092, 0.06405057201556838, -0.2547483825168052, -0.0941696516779836, 0.01696029677115269, 0.019105945375682037, -0.07613206641338832, 0.02977378664649424, -0.21444926169027867, -0.1418564313043341, 0.07505074618739557, 0.056845764760544586, 0.24798546275291408, 0.31734233465465606, 0.3082021133888205, 0.2204347345397868, 0.3595068441911607, -0.0644640414603189, 0.08700062787083396, 0.3537683767671748, 0.27618761262016894, 0.43078203091609385, 0.21660270728179565, 0.32826730160695455
];
const FC1_BIAS: [f32; 8] = [-0.010232711659359189, 0.9876513817976375, -0.07284331706553454, 1.4793685089855921, -0.6658040034188324, 0.5780534066889959, -0.17502765733806164, -0.724821914187904];
const FC2_WEIGHT: [f32; 8] = [0.17737376564236118, 0.5792563715068142, 0.22778093371035896, 0.8043748440534788, -0.8727999062715187, 0.4180485700460092, -0.11464708414191283, -0.5765955492434823];
const FC2_BIAS: f32 = 0.528237280094171;

const Y_MEAN: f32 = -3755.4650307508496;
const Y_STD: f32 = 1509.308810925168;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 593.73) / 4011.14;
    input[1] /= 92.83;
    input[2] /= 9.53;
    input[3] /= 3.78;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

#[cfg(feature = "spsa")]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        pub fn set_parameter(name: &str, value: &str) {
            match name {
                $(stringify!($name) => unsafe { parameters::$name = value.parse().unwrap() },)*
                _ => panic!("Unknown tunable parameter: {name}"),
            }
        }

        pub fn print_options() {
            $(println!("option name {} type string", stringify!($name));)*
        }

        $(pub fn $name() -> $type {
            unsafe { parameters::$name }
        })*

        #[allow(non_upper_case_globals)]
        mod parameters {
            $(pub static mut $name: $type = $value;)*
        }
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [0.0073599460290416805, 0.16280756673521352, 0.30236439394443415, 0.1500709566851925, 0.398113012170105, -0.026265299514945196, 0.03489120434928744, -0.11988737287356999, 0.19641152759203107, 0.11291440284104358, 0.1650128539472291, 0.07921242633997146, 0.1555319310732886, -0.024026610812284188, -0.014192367294973227, -0.04782564589562678, -0.007706540374799248, 1.254006031369606, -0.3699987454829671, -0.46620733246638824, -0.44878350713481663, 0.011044738251784505, 0.012729983053887641, 0.013395935661001019, 0.019319663099742534, 0.011078114953967919, 0.05004724811581292, 0.34353211355868174, 0.1844870416227482, 0.002076835548169815, 0.4034976659984284, 0.09473380516808695, 0.20394238598482728, 0.02992357340599367, 0.1606732969870749, 0.17196661651301248, 0.35441427011837323, 0.33184995872167333, 0.35232049654640174, 0.09756336002530029, 0.2989023279870229, 0.27717539186466733, -0.010543213268928889, 0.7602706437399339, 0.23926437623196312, 0.2655687364389624, -0.15729588192060528, 0.3631214976257653, 0.2709973840425026, 0.1411422563428978, 0.2829204073253404, 0.33085245776482797, -0.23758967565387473, 0.09411665326631617, 0.22066621164195843, 0.14893869548951294, -0.7458871122542942, 0.28570996339777943, 0.3218903666782331, 0.48037244370108123, 0.03819266911439101, 0.13832367835523549, -0.07846904315881695, 0.08124938773508388, 0.015097634471330529, -0.010256254596422508, 0.12605178258416597, 0.06171258619962172, -0.159391648255911, 0.17446818619955518, -0.0031718677713865567, 0.01431014009629606, -0.12240735859410133, -0.010079770671073487, 0.007184976889438131, -0.014822816348518987, 0.004957557181405001, -0.037217426717372784, -0.06841274824439787, 0.33562662433104573, -0.042349806303111664, 0.49453604089978304, -0.5488672514080047, 0.1055660782641777, 0.3040305343372147, 0.4289258881261694, -0.09731190784270698, 0.13706546211787485, -0.10888882740735782, -0.11900359575564758, 0.007433596383265161, -0.012334000009796193, -0.045129812244572826, -0.04144694967839531, 0.04225837501125412, -0.010125802418412034, -0.015371612199685396, -0.014190714862161752, 0.02941690769021496, 0.035111010631567574, -0.020691814435060248, -0.021509651875345384, 0.017093342408208034, -0.0006986706635633804];
const FC1_BIAS: [f32; 8] = [-0.49844649892331017, -0.006885570075845522, -0.6617195069535448, -0.6597457216261599, 0.6184627176465624, -0.05943635467176578, 0.6918229557265007, 0.02480472359270202];
const FC2_WEIGHT: [f32; 8] = [-0.23261353520821487, 0.9163972860912445, -0.5545320234527226, -0.7761011710340239, 0.45007063047920115, -0.03840522914527898, 0.5596822378718963, 0.03778311849856529];
const FC2_BIAS: f32 = 0.4449785188077504;

const Y_MEAN: f32 = -2256.6299873500902;
const Y_STD: f32 = 1832.9004022190254;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 598.6494420793645) / 4027.3294511547806;
    input[1] /= 93.40588878055759;
    input[2] /= 9.222239392318317;
    input[3] /= 3.688771177946037;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

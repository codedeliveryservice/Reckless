pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [
    0.06172757750840132,
    -0.17664426859083782,
    -0.19136105768279077,
    -0.08586172218961562,
    0.11419868218031913,
    -0.02323349943931985,
    0.19107671013920274,
    -0.23301735013947056,
    0.06555744124207981,
    -0.039210619272212595,
    0.018497639837107168,
    -0.022581845013445765,
    -0.142837087959595,
    -0.3369866166558677,
    0.011022499578825257,
    -0.12879522447081104,
    0.38707731381119814,
    -0.028041875243496668,
    -0.1154104625436047,
    0.1718915309892003,
    0.1549287037930332,
    0.2669818246660871,
    -0.2991623434219368,
    0.05572364072609655,
    0.4400981488110246,
    0.14431591830785528,
    0.01738122126186831,
    0.12627121878450803,
    0.11887598187734853,
    0.5404969546556171,
    -0.16510613506418498,
    -0.1599793191154043,
    -0.2029835145672808,
    0.07661670032564256,
    0.13496700246315577,
    0.010960920160703769,
    0.0720394336995845,
    -0.16245255387881685,
    0.16058629468476132,
    0.013084299602495561,
    0.011916077842352608,
    -0.26566769770185106,
    0.5560747562505828,
    -0.09227490399861772,
    -0.05085241524835225,
    -0.1446388539004732,
    -0.40027273385490647,
    0.14688733717827535,
    -0.08448929558923494,
    -0.115834019814255,
    -0.04098865468086576,
    -0.2637010675635243,
    0.09076975475603384,
    0.07830023340914057,
    0.2711395070543564,
    0.28563761407730914,
    0.452253088709051,
    0.2573009441740617,
    -0.004448538195795175,
    0.02235823765582438,
    0.26864627223551896,
    0.4197123569280151,
    0.2016161510468002,
    0.13044344239929956,
    0.4527775176413946,
    -0.2651115570675264,
    0.18397550984400773,
    0.45556670270192856,
    -0.5943139932010095,
    0.2728368209412597,
    0.18819453385985174,
    0.20353229633533604,
    0.6876930218857193,
    -0.35930361364827546,
    0.029629421665328167,
    -0.25700607986507584,
    0.03461351436839238,
    -0.041941464669713095,
    0.0273288356819933,
    -0.15552541400702558,
    0.005103668067200134,
    -0.01889886664775807,
    -0.26376375317836254,
    -0.05172178085677061,
    -0.004048382473956599,
    0.057377124937784414,
    -0.1005888288918035,
    0.044761348061039416,
    -0.21557476282192356,
    -0.23565737082360017,
    0.06272670483125972,
    0.07743192961554411,
    0.24436380888567086,
    0.3064687033323811,
    0.27801561319073664,
    0.2686531543755398,
    0.34606617812397955,
    -0.06119951917490289,
    0.044310930607040486,
    0.31162896306174437,
    0.26897623728287356,
    0.3885498984955208,
    0.20966189610435404,
    0.35239712215467245,
];

const FC1_BIAS: [f32; 8] = [
    -0.004434126988868279,
    1.0201297026181346,
    -0.106027644381002,
    1.4995428631515122,
    -0.6474983217435233,
    0.5794104618458495,
    -0.1916741954554867,
    -0.7570460095081262,
];

const FC2_WEIGHT: [f32; 8] = [
    0.24877107671419077,
    0.5896052472113411,
    0.22423046631471766,
    0.8258393193843634,
    -0.9062230165037539,
    0.3158737107428805,
    -0.16645304316724846,
    -0.5831902281056525,
];

const FC2_BIAS: f32 = 0.580424763385204;

const Y_MEAN: f32 = -3752.148568220832;
const Y_STD: f32 = 1497.623922784414;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 593.73) / 4011.14;
    input[1] /= 92.83;
    input[2] /= 9.53;
    input[3] /= 3.78;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

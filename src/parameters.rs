pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [
    0.0997939811326787, -0.11789193558642194, -0.15583365017163348, -0.15048071217199854, 0.08685379309655641, 0.0727162614056582, 0.22976164962189, -0.34047144172752286, 0.029617105532503865, -0.007257068532028373, -0.021193748233380025, -0.044234569939615914, -0.20960478885455752, -0.3618739238446157, 0.08243998886406101, -0.09880395466276934, 0.3615825744201483, -0.04415537326597478, -0.1260819118484814, 0.17415918930023772, 0.07960323928940287, 0.2650976481883187, -0.16624947770153464, 0.03103009283884914, 0.40334791827771344, 0.13842602032863005, 0.07237756787297839, 0.09539930008227351, 0.1362326710365626, 0.5318903077973207, -0.23579476201379485, -0.09530291264866877, -0.22148859279778416, 0.03180825018946363, 0.12387560175568302, 0.07429024202415309, 0.08755264706382482, -0.09147675890766468, 0.11760686733457287, -0.004765204683607805, 0.040304570127606285, -0.1603908382660214, 0.4135382397933408, -0.11590250712940245, 0.038728525961904944, -0.09071302186532612, -0.49373002236582186, 0.16826276036958215, 0.011498789264455344, -0.12882081576204613, 0.02421503961038281, -0.27543425906246244, 0.019553595510897, 0.08578389938895165, 0.16992851853761004, 0.26953587772957166, 0.46036269173679034, 0.28838166395383624, -0.003330566066733544, 0.07106678983421683, 0.23203049621241945, 0.3523175368873678, 0.17386594694878083, 0.14215781922731374, 0.3750559068537396, -0.3139238506056522, 0.20008623320333113, 0.48243225236185305, -0.5412082580244941, 0.18973975275927518, 0.20788016140780563, 0.16679790370635844, 0.5854222534601956, -0.36746481795625807, 0.02661534170007326, -0.21306545286027478, 0.019613233641327023, -0.0044288938392561695, 0.040099816559851564, -0.2002980154829555, 0.021946591721824952, 0.0689400445293601, -0.19133671680820769, -0.04164718275643521, 0.017277255716175086, -0.013333361625722647, -0.07725866360855227, 0.03359855474018368, -0.26185510137438534, -0.12514965452725849, 0.017070494384283232, 0.03287552614136788, 0.229915938480812, 0.26147934975954884, 0.3090829580164651, 0.17628721171147682, 0.3836888429186459, -0.02963641070186113, 0.14081309967452443, 0.31230273194481484, 0.2854596546820757, 0.4131537228341893, 0.16561057909489219, 0.3577142562384017
];
const FC1_BIAS: [f32; 8] = [0.06022878981660963, 0.9735087888074968, -0.09888647520420507, 1.4030621760053832, -0.6886511290057951, 0.6215841665561695, -0.13951660398843502, -0.7055637599367066];
const FC2_WEIGHT: [f32; 8] = [0.20734897151747828, 0.5246631173751009, 0.19811899511643305, 0.8636346882610322, -0.9113885177136213, 0.39495426641711817, -0.06066167210097809, -0.522964994382184];
const FC2_BIAS: f32 = 0.5008258744396479;

const Y_MEAN: f32 = -3751.108444802553;
const Y_STD: f32 = 1513.2863639061904;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 593.73) / 4011.14;
    input[1] /= 92.83;
    input[2] /= 9.53;
    input[3] /= 3.78;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

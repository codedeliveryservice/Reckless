pub const PIECE_VALUES: [i32; 7] = [100, 375, 400, 625, 1200, 0, 0];

#[allow(unused_macros)]
#[cfg(not(feature = "spsa"))]
macro_rules! define {
    {$($type:ident $name:ident: $value:expr; )*} => {
        $(pub const fn $name() -> $type {
            $value
        })*
    };
}

fn relu(x: f32) -> f32 {
    if x > 0.0 {
        x
    } else {
        0.0
    }
}

const FC1_WEIGHT: [f32; 104] = [
    0.08024109065169321,
    -0.13964103417828239,
    -0.2110797829591753,
    -0.09964146723279996,
    0.11847258451021937,
    -0.024080348828806206,
    0.19971117939719046,
    -0.24053616186846646,
    0.03787355170265886,
    -0.033142913073493444,
    0.03296827127730833,
    -0.05794365288701724,
    -0.12368021128321496,
    -0.3327482241141739,
    0.030236073607983277,
    -0.1577742486629482,
    0.4017734524421664,
    -0.029344078184207333,
    -0.13933871701141215,
    0.16534643133832538,
    0.15101583988310513,
    0.25049193039120893,
    -0.29673973992454467,
    0.049682418266128896,
    0.4086921169034898,
    0.16028669692836056,
    0.03275852358562679,
    0.13246007742253668,
    0.11677945077934766,
    0.5707401007348621,
    -0.2020770377233579,
    -0.1761448526014726,
    -0.17095191919180008,
    0.10392505125463186,
    0.12215243386281262,
    0.018632278458956767,
    0.06660038689981675,
    -0.16058483507895577,
    0.18419623906935056,
    0.016396539789024833,
    0.04246623637009988,
    -0.27675743973971006,
    0.5731729644172406,
    -0.07238134124443948,
    -0.056024921768920606,
    -0.16089752946162938,
    -0.42003415712134723,
    0.10759365989973144,
    -0.08724738810202251,
    -0.10521776059170482,
    -0.07744761106745347,
    -0.2626711289365065,
    0.09629258865930437,
    0.11354967059429338,
    0.2955965905946209,
    0.2960678112109589,
    0.4632591490074009,
    0.2611402461080129,
    -0.026454667110149377,
    0.026559254292045725,
    0.26284325949587434,
    0.41620562374533804,
    0.2019234049154215,
    0.12174750213185233,
    0.43931751963587146,
    -0.24673202893719573,
    0.2027329636915901,
    0.4560735992236166,
    -0.5962959620613159,
    0.2720894869208979,
    0.16406204140786212,
    0.17909613460445784,
    0.6936759832791307,
    -0.3689347568946962,
    0.007817560189117653,
    -0.2454561028160594,
    0.058814419294867325,
    -1.717627928471074e-05,
    0.005765186068250688,
    -0.17934308345052935,
    0.03614039157504954,
    -0.004197502900894092,
    -0.2662582605040222,
    -0.08279328566035292,
    -0.01245245156915765,
    0.07406622280723024,
    -0.09725778555691705,
    0.04261199247460439,
    -0.19706486296860526,
    -0.25314820789503584,
    0.06861280447947166,
    0.09299123910874024,
    0.24378063582937504,
    0.3243655117003313,
    0.24516901880000774,
    0.2659300910820663,
    0.3370698631326749,
    -0.08450768216379614,
    0.011555992441352109,
    0.3280387221075985,
    0.2581501856138802,
    0.3629244269532638,
    0.23891394862104337,
    0.3541520842189119,
];

const FC1_BIAS: [f32; 8] = [
    -0.07711164023762167,
    1.0328690700833019,
    -0.1524982667554664,
    1.4774541893975988,
    -0.6739999837164462,
    0.5896819161704515,
    -0.15581267264124005,
    -0.7875191187064731,
];

const FC2_WEIGHT: [f32; 8] = [
    0.26083947608502367,
    0.5961391270490536,
    0.237678090679953,
    0.8443296200644629,
    -0.9036578596582804,
    0.34785794445868284,
    -0.20806039700953322,
    -0.6130520135687992,
];

const FC2_BIAS: f32 = 0.6225422022942856;

const Y_MEAN: f32 = -3754.313701950824;
const Y_STD: f32 = 1492.3182666745302;

const HIDDEN_SIZE: usize = 8;
const INPUT_SIZE: usize = 13;

pub fn lmr_forward(mut input: [f32; INPUT_SIZE]) -> f32 {
    input[0] = (input[0] + 593.73) / 4011.14;
    input[1] /= 92.83;
    input[2] /= 9.53;
    input[3] /= 3.78;

    let mut hidden = [0.0; HIDDEN_SIZE];
    for i in 0..HIDDEN_SIZE {
        let mut output = 0.0;
        for j in 0..INPUT_SIZE {
            output += FC1_WEIGHT[i * INPUT_SIZE + j] * input[j];
        }
        hidden[i] = relu(output + FC1_BIAS[i]);
    }

    let mut y = 0.0;
    for i in 0..HIDDEN_SIZE {
        y += FC2_WEIGHT[i] * hidden[i];
    }
    y += FC2_BIAS;
    y * Y_STD + Y_MEAN
}

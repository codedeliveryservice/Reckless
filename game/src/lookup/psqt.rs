use crate::attacks::Color;

const FILES: usize = 8 / 2;
const RANKS: usize = 8;

/// Symmetrically distributed piece-square bonuses (mirrored along the Y axis).
#[rustfmt::skip]
const BONUSES: [[[(i32, i32); FILES]; RANKS]; 6] = [
    [   // Pawn
        [(0, 0); FILES]; RANKS
    ],
    [   // Knight
        [(-219, 104), ( 31, 126), ( 11, 134), (107, 101)],
        [( 28,  95), ( -1, 130), ( 60, 122), ( 79, 131)],
        [( 31, 117), ( 47, 138), ( 78, 145), ( 66, 152)],
        [( 45, 132), ( 19, 136), ( 35, 160), ( 24, 152)],
        [( 15, 115), ( 23, 125), ( 14, 142), (  9, 145)],
        [(-16,  69), (  1,  91), (  0,  81), ( 16, 126)],
        [( -3,  63), (-18, 100), ( -9,  82), (  2,  92)],
        [(-69,  59), ( -5,  44), ( -8,  69), ( -8,  94)],
    ],
    [   // Bishop
        [(  7, 138), ( 40, 137), (-50, 147), ( 25, 142)],
        [(-12, 132), (  3, 140), ( 34, 121), ( 25, 124)],
        [( 28, 135), ( 31, 138), ( 71, 121), ( 54, 128)],
        [(  9, 134), (  2, 142), ( 27, 137), ( 35, 136)],
        [( 16, 112), (  4, 127), ( -6, 136), ( 16, 134)],
        [( 10, 130), ( 13, 121), (  9, 120), (  1, 131)],
        [( 23, 102), ( 19,  99), ( 17, 108), (  0, 116)],
        [(  7, 127), ( 16,  80), (  0,  96), (-10, 115)],
    ],
    [   // Rook
        [( 80,  16), ( 98,   9), ( 99,   1), (100,   6)],
        [( 34,  46), ( 29,  55), ( 65,  45), ( 78,  42)],
        [( 24,  39), ( 60,  34), ( 70,  31), ( 71,  25)],
        [(-11,  41), (-11,  54), ( 16,  40), (  9,  42)],
        [(-56,  25), (-38,  30), (-34,  31), (-21,  20)],
        [(-49,  -8), (-40,  -4), (-30,  -5), (-25,  -9)],
        [(-65,   2), (-40,  -5), (-16, -15), (-15, -13)],
        [(-35,   0), (-25,   0), ( -6,  -9), (  1, -15)],
    ],
    [   // Queen
        [( 36,  77), ( 50, 113), ( 46, 124), ( 36, 132)],
        [( 14, 110), (-39, 154), (-20, 175), (-33, 210)],
        [(-11, 110), ( 10, 132), (-19, 169), ( -6, 171)],
        [(-10, 124), (-30, 160), (-24, 154), (-26, 150)],
        [(-14,  75), (-20, 105), (-20,  95), (-22, 105)],
        [(-15,  62), (-10,  41), (-11,  66), (-15,  45)],
        [(-10,  14), ( -6,   5), (  4,   0), (  1,  26)],
        [(-17,  46), ( -1, -19), (  0, -21), (  1,   1)],
    ],
    [   // King
        [(0, 0); FILES]; RANKS
    ]
];

/// Asymmetrically distributed pawn bonuses.
#[rustfmt::skip]
const PAWN_BONUSES: [(i32, i32); 64] = [
    (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0),
    (215, 193), (143, 200), (169, 187), (216, 107), (122,  95), ( 40, 102), (-57, 142), (-27, 182),
    ( 10, 152), ( 25, 161), ( 64, 138), ( 59, 102), ( 52,  99), ( 80,  87), ( 46, 149), ( -5, 107),
    ( -8,  53), (  4,  44), ( -6,  31), ( 16,  16), ( 22,   4), ( 24,  12), (  3,  25), (-17,  20),
    (-16,   6), (  2,   1), (  0, -20), (  0, -20), (  2, -21), (  4, -15), ( 12, -12), (-22, -24),
    (-14, -14), ( -4, -10), (-12, -34), (-14, -10), ( -8, -14), ( -3, -24), ( 34, -22), ( -2, -39),
    (-23,   3), ( -9,  -3), (-24, -16), (-21, -27), (-15,  -4), ( 13, -25), ( 38, -31), (-18, -41),
    (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0), (  0,   0),
];

/// Generates a piece-square table indexed by [color][piece][square].
pub fn generate_map() -> [[[(i32, i32); 64]; 6]; 2] {
    let mut map = [[[(0, 0); 64]; 6]; 2];

    for (square, &pawn_bonus) in PAWN_BONUSES.iter().enumerate() {
        map[Color::Black as usize][0][square] = (-pawn_bonus.0, -pawn_bonus.1);
        map[Color::White as usize][0][square ^ 56] = pawn_bonus;

        for (piece, &bonus) in BONUSES.iter().enumerate().skip(1) {
            let (rank, file) = (square / 8, square % 8);
            let file = if file > 3 { 7 - file } else { file };

            let bonus = bonus[rank][file];
            map[Color::Black as usize][piece][square] = (-bonus.0, -bonus.1);
            map[Color::White as usize][piece][square ^ 56] = bonus;
        }
    }

    map
}
